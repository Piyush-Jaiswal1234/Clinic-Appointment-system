import java.util.*;

//--------------- Class to enter details of a Patient------------------ 
class Patient {
    int id;
    String name;
    int age;
    String gender;

    public Patient(int id, String name, int age, String gender) {
        this.id = id;
        this.name = name;
        this.age = age;
        this.gender = gender;
    }

    public String toString() {
        return "Patient ID: " + id + ", Name: " + name + ", Age: " + age + ", Gender: " + gender;
    }
}

//------------- Class to manage the data of every doctor-----------------
class Doctor {
    int id;
    String name;
    String department;
    boolean available;

    public Doctor(int id, String name, String department, boolean available) {
        this.id = id;
        this.name = name;
        this.department = department;
        this.available = available;
    }

    public String toString() {
        return "Doctor ID: " + id + ", Name: " + name + ", Dept: " + department + ", Available: " + available;
    }
}

//------------- Class Appointment to manage and access the details of all appointments-----------------
class Appointment {
    int appointmentId;
    Patient patient;
    Doctor doctor;
    String date;
    String status; // Booked / Cancelled
    String prescription;
    double payment;

    public Appointment(int appointmentId, Patient patient, Doctor doctor, String date) {
        this.appointmentId = appointmentId;
        this.patient = patient;
        this.doctor = doctor;
        this.date = date;
        this.status = "Booked";
        this.prescription = "Not yet provided";
        this.payment = 0.0;
    }

    public String toString() {
        return "Appointment ID: " + appointmentId + ", Patient: " + patient.name +
                ", Doctor: " + doctor.name + ", Date: " + date + ", Status: " + status +
                ", Payment: Rs " + payment;
    }
}

//------------- Main class to manage all the functions of the Appointment System--------------------
public class ClinicAppointmentSystem {
    static Scanner sc = new Scanner(System.in);
    static List<Patient> patients = new ArrayList<>();
    static List<Doctor> doctors = new ArrayList<>();
    static List<Appointment> appointments = new ArrayList<>();

    static int patientCount = 1;
    static int appointmentCount = 1;

    public static void main(String[] args) {
        seedDoctors();
        int choice;
        do {
            System.out.println("\n===== CLINIC APPOINTMENT SYSTEM =====");
            System.out.println("1. Register Patient");
            System.out.println("2. Check Doctor Availability");
            System.out.println("3. Book Appointment");
            System.out.println("4. Cancel Appointment");
            System.out.println("5. Add Prescription");
            System.out.println("6. Handle Payment");
            System.out.println("7. View Appointments by Department");
            System.out.println("8. Exit");
            System.out.print("Enter choice: ");
            choice = sc.nextInt();
            sc.nextLine();

            switch (choice) {
                case 1 -> registerPatient();
                case 2 -> checkDoctorAvailability();
                case 3 -> bookAppointment();
                case 4 -> cancelAppointment();
                case 5 -> addPrescription();
                case 6 -> handlePayment();
                case 7 -> viewAppointmentsByDepartment();
                case 8 -> System.out.println("Exiting... Thank you!");
                default -> System.out.println("Invalid choice! Try again.");
            }
        } while (choice != 8);
    }

    //----------- Preload default values of doctors ----------------
    static void seedDoctors() {
        doctors.add(new Doctor(1, "Dr. Mehta", "Cardiology", true));
        doctors.add(new Doctor(2, "Dr. Sharma", "Orthopedics", true));
        doctors.add(new Doctor(3, "Dr. Verma", "Neurology", false));
        doctors.add(new Doctor(4, "Dr. Gupta", "Pediatrics", true));
    }

    //------------ Registering a Patient ----------------
    static void registerPatient() {
        System.out.print("Enter name: ");
        String name = sc.nextLine();
        System.out.print("Enter age: ");
        int age = sc.nextInt();
        sc.nextLine();
        System.out.print("Enter gender: ");
        String gender = sc.nextLine();

        Patient p = new Patient(patientCount++, name, age, gender);
        patients.add(p);
        System.out.println("Patient registered successfully: " + p);
    }

    //---------- Checking Doctor Availability --------------
    static void checkDoctorAvailability() {
        System.out.println("\nAvailable Doctors:");
        for (Doctor d : doctors) {
            System.out.println(d);
        }
    }

    //----------- Booking appointments -----------------
    static void bookAppointment() {
        if (patients.isEmpty()) {
            System.out.println("No registered patients. Please register first.");
            return;
        }

        System.out.print("Enter Patient ID: ");
        int pid = sc.nextInt();
        sc.nextLine();

        Patient patient = patients.stream()
                .filter(p -> p.id == pid)
                .findFirst()
                .orElse(null);

        if (patient == null) {
            System.out.println("Invalid patient ID.");
            return;
        }

        System.out.print("Enter Department: ");
        String dept = sc.nextLine();

        List<Doctor> available = new ArrayList<>();
        for (Doctor d : doctors) {
            if (d.department.equalsIgnoreCase(dept) && d.available)
                available.add(d);
        }

        if (available.isEmpty()) {
            System.out.println("No available doctors in this department.");
            return;
        }

        System.out.println("Available Doctors:");
        for (Doctor d : available)
            System.out.println(d);

        System.out.print("Enter Doctor ID to book: ");
        int did = sc.nextInt();
        sc.nextLine();

        Doctor doctor = doctors.stream()
                .filter(d -> d.id == did)
                .findFirst()
                .orElse(null);

        if (doctor == null || !doctor.available) {
            System.out.println("Doctor not available.");
            return;
        }

        System.out.print("Enter Appointment Date (dd-mm-yyyy): ");
        String date = sc.nextLine();

        Appointment a = new Appointment(appointmentCount++, patient, doctor, date);
        appointments.add(a);

        System.out.println(" Appointment booked successfully!");
        System.out.println(a);
    }

    //---------Cancelling an appointment ----------------
    static void cancelAppointment() {
        System.out.print("Enter Appointment ID to cancel: ");
        int aid = sc.nextInt();
        sc.nextLine();

        for (Appointment a : appointments) {
            if (a.appointmentId == aid) {
                a.status = "Cancelled";
                System.out.println("Appointment cancelled successfully.");
                return;
            }
        }
        System.out.println("Appointment not found.");
    }

    //------------ Adding prescription given by doctor ----------------
    static void addPrescription() {
        System.out.print("Enter Appointment ID: ");
        int aid = sc.nextInt();
        sc.nextLine();

        for (Appointment a : appointments) {
            if (a.appointmentId == aid && a.status.equals("Booked")) {
                System.out.print("Enter Prescription: ");
                String pres = sc.nextLine();
                a.prescription = pres;
                System.out.println("Prescription added successfully!");
                return;
            }
        }
        System.out.println("Appointment not found or cancelled.");
    }

    //---------- Handling Payments -------------
    static void handlePayment() {
        System.out.print("Enter Appointment ID: ");
        int aid = sc.nextInt();
        sc.nextLine();

        for (Appointment a : appointments) {
            if (a.appointmentId == aid && a.status.equals("Booked")) {
                System.out.print("Enter Payment Amount (Rs): ");
                double amount = sc.nextDouble();
                a.payment = amount;
                System.out.println("Payment recorded successfully!");
                return;
            }
        }
        System.out.println("Appointment not found or cancelled.");
    }

    //-----------View appointments categorised by departments ---------------
    static void viewAppointmentsByDepartment() {
        Map<String, List<Appointment>> map = new HashMap<>();
        for (Appointment a : appointments) {
            map.computeIfAbsent(a.doctor.department, k -> new ArrayList<>()).add(a);
        }

        for (String dept : map.keySet()) {
            System.out.println("\nDepartment: " + dept);
            for (Appointment a : map.get(dept)) {
                System.out.println(" - " + a);
            }
        }
    }
}

